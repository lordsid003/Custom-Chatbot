# -*- coding: utf-8 -*-
"""career_counselling_chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1beVmSBbMVPLX-Pa9uvwVPGxDk73cJy5v
"""

# Career counseling dataset with categorized statements and their corresponding labels
career_counseling_data = {
    "personality_traits": {
        "analytical": [
            "I enjoy solving complex problems",
            "I like working with numbers and data",
            "I prefer logical approaches to challenges",
            "I'm detail-oriented in my work",
            "I enjoy analyzing patterns and trends"
        ],
        "creative": [
            "I love coming up with unique ideas",
            "I enjoy expressing myself artistically",
            "I prefer thinking outside the box",
            "I'm drawn to innovative solutions",
            "I like creating new things from scratch"
        ],
        "social": [
            "I enjoy working with people",
            "I'm good at understanding others' feelings",
            "I prefer collaborative work environments",
            "I'm comfortable speaking in public",
            "I like helping others solve their problems"
        ],
        "practical": [
            "I prefer hands-on work",
            "I enjoy building or fixing things",
            "I like seeing tangible results",
            "I'm good at working with tools and machinery",
            "I enjoy physical, practical tasks"
        ],
        "enterprising": [
            "I enjoy leading teams",
            "I'm good at persuading others",
            "I like taking initiative",
            "I enjoy competitive environments",
            "I'm comfortable making decisions"
        ]
    },

    "skills_and_abilities": {
        "technical": [
            "I'm proficient in programming",
            "I understand complex technical concepts",
            "I can troubleshoot technical problems",
            "I'm good at working with software",
            "I enjoy learning new technologies"
        ],
        "communication": [
            "I write clearly and effectively",
            "I'm good at explaining complex ideas",
            "I communicate well with different audiences",
            "I'm skilled at giving presentations",
            "I can mediate conflicts effectively"
        ],
        "organizational": [
            "I'm good at managing time",
            "I can coordinate multiple tasks efficiently",
            "I'm skilled at planning projects",
            "I keep track of details well",
            "I'm good at setting priorities"
        ],
        "creative_skills": [
            "I can design visually appealing content",
            "I'm good at creative writing",
            "I can think of innovative solutions",
            "I have strong artistic abilities",
            "I'm skilled at visual composition"
        ],
        "research": [
            "I'm good at gathering information",
            "I can analyze complex data",
            "I enjoy conducting research",
            "I'm skilled at evaluating sources",
            "I can identify patterns in information"
        ]
    },

    "work_preferences": {
        "environment": [
            "I prefer working in an office",
            "I enjoy working outdoors",
            "I like working from home",
            "I prefer working in different locations",
            "I enjoy working in dynamic environments"
        ],
        "work_style": [
            "I prefer working independently",
            "I enjoy team collaboration",
            "I like structured work environments",
            "I prefer flexible working hours",
            "I enjoy project-based work"
        ],
        "job_characteristics": [
            "I value work-life balance",
            "I prefer high-paying jobs",
            "I enjoy challenging work",
            "I like jobs with clear advancement",
            "I prefer jobs with social impact"
        ],
        "stress_tolerance": [
            "I work well under pressure",
            "I can handle tight deadlines",
            "I manage stress effectively",
            "I adapt well to changes",
            "I remain calm in crisis situations"
        ],
        "growth_preferences": [
            "I seek continuous learning",
            "I value mentorship opportunities",
            "I prefer rapid career advancement",
            "I enjoy developing new skills",
            "I like taking on increasing responsibility"
        ]
    },

    "career_mappings": {
        "technology": {
            "matching_traits": ["analytical", "technical", "practical"],
            "careers": [
                {"title": "Software Developer", "skills_required": ["programming", "problem-solving", "analytical thinking"]},
                {"title": "Data Scientist", "skills_required": ["statistics", "programming", "analysis"]},
                {"title": "IT Consultant", "skills_required": ["technical knowledge", "communication", "problem-solving"]},
                {"title": "Systems Analyst", "skills_required": ["technical understanding", "analysis", "project management"]},
                {"title": "DevOps Engineer", "skills_required": ["automation", "infrastructure", "scripting"]}
            ]
        },
        "business": {
            "matching_traits": ["enterprising", "social", "organizational"],
            "careers": [
                {"title": "Business Analyst", "skills_required": ["analysis", "communication", "problem-solving"]},
                {"title": "Project Manager", "skills_required": ["leadership", "organization", "communication"]},
                {"title": "Marketing Manager", "skills_required": ["strategy", "creativity", "analysis"]},
                {"title": "Financial Advisor", "skills_required": ["financial analysis", "communication", "planning"]},
                {"title": "Management Consultant", "skills_required": ["strategy", "analysis", "presentation"]}
            ]
        },
        "creative": {
            "matching_traits": ["creative", "artistic", "innovative"],
            "careers": [
                {"title": "Graphic Designer", "skills_required": ["design", "creativity", "software tools"]},
                {"title": "Content Creator", "skills_required": ["writing", "creativity", "media production"]},
                {"title": "UX Designer", "skills_required": ["user research", "design thinking", "prototyping"]},
                {"title": "Art Director", "skills_required": ["visual design", "leadership", "creativity"]},
                {"title": "Digital Marketing Specialist", "skills_required": ["marketing", "creativity", "analytics"]}
            ]
        },
        "healthcare": {
            "matching_traits": ["social", "practical", "analytical"],
            "careers": [
                {"title": "Nurse", "skills_required": ["patient care", "medical knowledge", "communication"]},
                {"title": "Physical Therapist", "skills_required": ["anatomy", "patient care", "rehabilitation"]},
                {"title": "Healthcare Administrator", "skills_required": ["management", "healthcare knowledge", "organization"]},
                {"title": "Medical Research Scientist", "skills_required": ["research", "analysis", "technical knowledge"]},
                {"title": "Mental Health Counselor", "skills_required": ["counseling", "psychology", "communication"]}
            ]
        },
        "education": {
            "matching_traits": ["social", "communication", "organizational"],
            "careers": [
                {"title": "Teacher", "skills_required": ["instruction", "communication", "planning"]},
                {"title": "Educational Consultant", "skills_required": ["analysis", "education", "consulting"]},
                {"title": "Instructional Designer", "skills_required": ["curriculum development", "creativity", "teaching"]},
                {"title": "School Administrator", "skills_required": ["leadership", "education", "management"]},
                {"title": "Special Education Teacher", "skills_required": ["special education", "patience", "adaptation"]}
            ]
        }
    },

    "assessment_weights": {
        "personality_match": 0.3,
        "skills_match": 0.3,
        "work_preference_match": 0.2,
        "experience_match": 0.2
    }
}

# Example function to use the dataset for career matching
def match_career_path(user_responses):
    """
    Match user responses to potential career paths

    Parameters:
    user_responses (dict): Dictionary containing user's responses to assessment questions

    Returns:
    list: Ranked list of potential career matches with scores
    """
    matches = []
    for field, careers in career_counseling_data["career_mappings"].items():
        score = 0

        # Calculate trait match
        trait_match = sum(trait in user_responses.get("traits", [])
                         for trait in careers["matching_traits"])
        score += trait_match * career_counseling_data["assessment_weights"]["personality_match"]

        # Calculate skills match
        skills_match = sum(any(skill in user_response.lower()
                             for user_response in user_responses.get("skills", []))
                         for career in careers["careers"]
                         for skill in career["skills_required"])
        score += skills_match * career_counseling_data["assessment_weights"]["skills_match"]

        matches.append({
            "field": field,
            "score": score,
            "careers": careers["careers"]
        })

    return sorted(matches, key=lambda x: x["score"], reverse=True)



# Function to get detailed career information
def get_career_details(career_field):
    """
    Get detailed information about careers in a specific field

    Parameters:
    career_field (str): The field to get career details for

    Returns:
    dict: Career details including required skills and descriptions
    """
    return career_counseling_data["career_mappings"].get(career_field, {})

import numpy as np
from collections import Counter

class CareerMatcher:
    def __init__(self, career_data):
        self.data = career_data
        self.weights = self.data["assessment_weights"]

    def calculate_similarity(self, text1, text2):
        """
        Calculate text similarity between two strings using word overlap
        """
        words1 = set(text1.lower().split())
        words2 = set(text2.lower().split())
        intersection = words1.intersection(words2)
        union = words1.union(words2)
        return len(intersection) / len(union) if union else 0

    def analyze_personality_match(self, user_traits, career_traits):
        """
        Calculate personality match score based on trait alignment
        """
        user_trait_set = set(user_traits)
        career_trait_set = set(career_traits)

        # Calculate direct matches
        direct_match_score = len(user_trait_set.intersection(career_trait_set)) / len(career_trait_set)

        # Calculate complementary traits
        complementary_traits = {
            "analytical": ["practical", "technical"],
            "creative": ["innovative", "artistic"],
            "social": ["communication", "enterprising"],
            "practical": ["technical", "analytical"],
            "enterprising": ["social", "leadership"]
        }

        complementary_score = 0
        for trait in user_trait_set:
            if trait in complementary_traits:
                complementary_matches = set(complementary_traits[trait]).intersection(career_trait_set)
                complementary_score += len(complementary_matches) * 0.5

        return (direct_match_score * 0.7 + complementary_score * 0.3)

    def analyze_skills_match(self, user_skills, required_skills):
        """
        Calculate skills match score with weighted importance
        """
        total_score = 0
        skill_importance = {
            "critical": 1.0,  # Must-have skills
            "important": 0.7, # Important but not critical
            "desirable": 0.3  # Nice-to-have skills
        }

        for user_skill in user_skills:
            max_skill_score = 0
            for req_skill in required_skills:
                # Calculate base similarity
                similarity = self.calculate_similarity(user_skill, req_skill)

                # Apply importance weighting
                if "essential" in req_skill.lower() or "required" in req_skill.lower():
                    weighted_score = similarity * skill_importance["critical"]
                elif "important" in req_skill.lower():
                    weighted_score = similarity * skill_importance["important"]
                else:
                    weighted_score = similarity * skill_importance["desirable"]

                max_skill_score = max(max_skill_score, weighted_score)

            total_score += max_skill_score

        return total_score / len(required_skills) if required_skills else 0

    def analyze_work_preferences(self, user_preferences, career_field):
        """
        Analyze work preference alignment with career fields
        """
        field_preferences = {
            "technology": ["independent", "structured", "analytical", "continuous learning"],
            "business": ["team-oriented", "dynamic", "leadership", "competitive"],
            "creative": ["flexible", "innovative", "autonomous", "artistic"],
            "healthcare": ["people-oriented", "structured", "helping others", "continuous learning"],
            "education": ["collaborative", "structured", "teaching", "social impact"]
        }

        if career_field not in field_preferences:
            return 0.5  # Default middle score for unknown fields

        field_prefs = field_preferences[career_field]
        preference_matches = 0

        for user_pref in user_preferences:
            for field_pref in field_prefs:
                if self.calculate_similarity(user_pref, field_pref) > 0.3:  # Threshold for preference match
                    preference_matches += 1
                    break

        return preference_matches / len(field_prefs)

    def calculate_experience_relevance(self, user_experience, career_field):
        """
        Calculate relevance of user's experience to career field
        """
        field_keywords = {
            "technology": ["software", "programming", "technical", "IT", "development", "coding"],
            "business": ["management", "analysis", "strategy", "marketing", "finance"],
            "creative": ["design", "art", "content", "creative", "media"],
            "healthcare": ["medical", "health", "patient", "care", "clinical"],
            "education": ["teaching", "training", "education", "instruction", "curriculum"]
        }

        if career_field not in field_keywords:
            return 0.5  # Default middle score for unknown fields

        keywords = field_keywords[career_field]
        experience_text = " ".join(user_experience).lower()

        # Count keyword matches
        keyword_matches = sum(1 for keyword in keywords if keyword in experience_text)

        # Calculate keyword density
        total_words = len(experience_text.split())
        keyword_density = keyword_matches / total_words if total_words > 0 else 0

        # Combine raw matches with density for final score
        return (keyword_matches / len(keywords) * 0.7 + keyword_density * 0.3)

    def match_career_path(self, user_profile):
        """
        Enhanced career matching algorithm that considers multiple factors

        Parameters:
        user_profile (dict): Dictionary containing:
            - traits: list of personality traits
            - skills: list of skills and abilities
            - preferences: list of work preferences
            - experience: list of experience descriptions

        Returns:
        list: Ranked career matches with detailed scoring breakdown
        """
        matches = []

        for field, careers in self.data["career_mappings"].items():
            # Initialize scoring components
            personality_score = self.analyze_personality_match(
                user_profile.get("traits", []),
                careers["matching_traits"]
            )

            # Calculate average skills match across all careers in the field
            skills_scores = []
            for career in careers["careers"]:
                skills_score = self.analyze_skills_match(
                    user_profile.get("skills", []),
                    career["skills_required"]
                )
                skills_scores.append(skills_score)
            avg_skills_score = np.mean(skills_scores) if skills_scores else 0

            # Calculate work preference match
            preference_score = self.analyze_work_preferences(
                user_profile.get("preferences", []),
                field
            )

            # Calculate experience relevance
            experience_score = self.calculate_experience_relevance(
                user_profile.get("experience", []),
                field
            )

            # Calculate weighted final score
            final_score = (
                personality_score * self.weights["personality_match"] +
                avg_skills_score * self.weights["skills_match"] +
                preference_score * self.weights["work_preference_match"] +
                experience_score * self.weights["experience_match"]
            )

            # Get top matching careers within the field
            career_matches = []
            for career in careers["careers"]:
                career_specific_score = self.analyze_skills_match(
                    user_profile.get("skills", []),
                    career["skills_required"]
                )
                career_matches.append({
                    "title": career["title"],
                    "match_score": career_specific_score,
                    "required_skills": career["skills_required"]
                })

            # Sort career matches by score
            career_matches.sort(key=lambda x: x["match_score"], reverse=True)

            matches.append({
                "field": field,
                "overall_score": final_score,
                "scoring_breakdown": {
                    "personality_match": personality_score,
                    "skills_match": avg_skills_score,
                    "preference_match": preference_score,
                    "experience_match": experience_score
                },
                "matching_careers": career_matches
            })

        # Sort matches by overall score
        matches.sort(key=lambda x: x["overall_score"], reverse=True)
        return matches

# Example usage
def demonstrate_matching():
    matcher = CareerMatcher(career_counseling_data)

    # Example user profile
    user_profile = {
        "traits": ["analytical", "technical", "practical"],
        "skills": [
            "I enjoy programming and coding",
            "I'm good at solving complex problems",
            "I have experience with data analysis"
        ],
        "preferences": [
            "I prefer working independently",
            "I enjoy structured environments",
            "I value continuous learning"
        ],
        "experience": [
            "Developed software applications for 2 years",
            "Led technical projects in college",
            "Created data analysis tools"
        ]
    }

    # Get career matches
    matches = matcher.match_career_path(user_profile)

    # Print results
    print("\nCareer Matching Results:")
    for match in matches[:3]:  # Top 3 matches
        print(f"\nField: {match['field']}")
        print(f"Overall Match Score: {match['overall_score']:.2f}")
        print("\nScoring Breakdown:")
        for category, score in match['scoring_breakdown'].items():
            print(f"- {category}: {score:.2f}")
        print("\nTop Matching Careers:")
        for career in match['matching_careers'][:2]:  # Top 2 careers per field
            print(f"- {career['title']} (Match Score: {career['match_score']:.2f})")

import re
from datetime import datetime
import random
from typing import Dict, List, Any, Tuple

class CareerCounselingChatbot:
    def __init__(self, career_data: Dict[str, Any]):
        self.matcher = CareerMatcher(career_data)
        self.data = career_data
        self.user_profile = {
            "traits": [],
            "skills": [],
            "preferences": [],
            "experience": []
        }
        self.conversation_state = "START"
        self.current_question_index = 0
        self.assessment_complete = False

        # Define conversation flow
        self.conversation_flow = {
            "START": {
                "questions": [
                    "Hi! I'm your career counseling assistant. Would you like to start your career assessment?",
                ],
                "next_state": "TRAITS",
                "process_func": self._process_start
            },
            "TRAITS": {
                "questions": [
                    "Let's start with your personality traits. Do you agree with this statement: 'I enjoy solving complex problems'?",
                    "How about this: 'I enjoy expressing myself creatively'?",
                    "Would you say: 'I prefer working with people over working alone'?",
                    "Do you agree: 'I enjoy practical, hands-on work'?",
                    "And finally: 'I like taking initiative and leading others'?"
                ],
                "next_state": "SKILLS",
                "process_func": self._process_traits
            },
            "SKILLS": {
                "questions": [
                    "Now, let's talk about your skills. What technical skills do you have? (e.g., programming, data analysis, design)",
                    "What communication or interpersonal skills would you highlight?",
                    "Do you have any specific certifications or specialized training?",
                    "What tools or software are you proficient in?",
                    "What would you say is your strongest professional skill?"
                ],
                "next_state": "PREFERENCES",
                "process_func": self._process_skills
            },
            "PREFERENCES": {
                "questions": [
                    "What type of work environment do you prefer? (office, remote, mixed)",
                    "Do you prefer working independently or in teams?",
                    "What's most important to you in a job? (stability, growth, creativity, etc.)",
                    "How do you handle stress and pressure at work?",
                    "What are your career growth expectations?"
                ],
                "next_state": "EXPERIENCE",
                "process_func": self._process_preferences
            },
            "EXPERIENCE": {
                "questions": [
                    "What's your current or most recent job role?",
                    "What are your main responsibilities in this role?",
                    "What projects or achievements are you most proud of?",
                    "What industries have you worked in?",
                    "What specific technical tools or methodologies have you used professionally?"
                ],
                "next_state": "ANALYSIS",
                "process_func": self._process_experience
            },
            "ANALYSIS": {
                "questions": [
                    "Great! I have enough information to provide your career matches. Would you like to see them?",
                ],
                "next_state": "RESULTS",
                "process_func": self._process_analysis
            },
            "RESULTS": {
                "questions": [
                    "Would you like more details about any of these career paths?",
                ],
                "next_state": "DETAILS",
                "process_func": self._process_results
            },
            "DETAILS": {
                "questions": [
                    "Would you like information about another career path? Or shall we explore something else?",
                ],
                "next_state": "DETAILS",
                "process_func": self._process_details
            }
        }

        # Response templates for more natural conversation
        self.response_templates = {
            "positive": [
                "That's great! ",
                "Excellent! ",
                "Perfect! ",
                "Wonderful! ",
                "Great choice! "
            ],
            "transition": [
                "Let's move on to ",
                "Now, let's talk about ",
                "Next, I'd like to know about ",
                "Let's discuss ",
                "Moving forward, tell me about "
            ],
            "acknowledgment": [
                "I understand. ",
                "I see. ",
                "That makes sense. ",
                "Interesting. ",
                "Got it. "
            ]
        }

    def _get_random_template(self, template_type: str) -> str:
        """Get a random response template for more natural conversation"""
        return random.choice(self.response_templates[template_type])

    def _process_start(self, user_input: str) -> Tuple[str, bool]:
        """Process initial user response"""
        if any(word in user_input.lower() for word in ['yes', 'sure', 'okay', 'start', 'begin']):
            return self._get_random_template("positive") + "Let's begin with understanding your personality traits.", True
        return "I understand you might not be ready. When you'd like to start, just let me know.", False

    def _process_traits(self, user_input: str) -> Tuple[str, bool]:
        """Process trait-related responses"""
        if any(word in user_input.lower() for word in ['yes', 'agree', 'true', 'definitely']):
            trait_mappings = {
                0: "analytical",
                1: "creative",
                2: "social",
                3: "practical",
                4: "enterprising"
            }
            if self.current_question_index in trait_mappings:
                self.user_profile["traits"].append(trait_mappings[self.current_question_index])
        return "", True

    def _process_skills(self, user_input: str) -> Tuple[str, bool]:
        """Process skill-related responses"""
        self.user_profile["skills"].append(user_input)
        return "", True

    def _process_preferences(self, user_input: str) -> Tuple[str, bool]:
        """Process work preference responses"""
        self.user_profile["preferences"].append(user_input)
        return "", True

    def _process_experience(self, user_input: str) -> Tuple[str, bool]:
        """Process experience-related responses"""
        self.user_profile["experience"].append(user_input)
        return "", True

    def _process_analysis(self, user_input: str) -> Tuple[str, bool]:
        """Process analysis confirmation"""
        if any(word in user_input.lower() for word in ['yes', 'sure', 'okay', 'show']):
            self.career_matches = self.matcher.match_career_path(self.user_profile)
            return self._format_career_matches(), True
        return "Let me know when you're ready to see your matches.", False

    def _format_career_matches(self) -> str:
        """Format career matches into a readable string"""
        result = "Based on your responses, here are your top career matches:\n\n"

        for i, match in enumerate(self.career_matches[:3], 1):
            result += f"{i}. {match['field'].title()} Field (Match Score: {match['overall_score']:.2f})\n"
            result += "   Top matching careers:\n"
            for career in match['matching_careers'][:2]:
                result += f"   - {career['title']} (Match Score: {career['match_score']:.2f})\n"
            result += "\n"

        result += "\nWould you like more details about any of these careers? Just name the career you're interested in."
        return result

    def _process_results(self, user_input: str) -> Tuple[str, bool]:
        """Process user's request for specific career details"""
        for match in self.career_matches:
            for career in match['matching_careers']:
                if career['title'].lower() in user_input.lower():
                    return self._get_career_details(career['title']), True
        return "I couldn't find that specific career. Could you please specify one from the list above?", False

    def _get_career_details(self, career_title: str) -> str:
        """Get detailed information about a specific career"""
        for match in self.career_matches:
            for career in match['matching_careers']:
                if career['title'] == career_title:
                    return f"""
Detailed information about {career_title}:

Required Skills:
{', '.join(career['required_skills'])}

Match Score: {career['match_score']:.2f}

Would you like information about another career path?
"""
        return "Career details not found. Please try another career from the list."

    def _process_details(self, user_input: str) -> Tuple[str, bool]:
        """Process follow-up requests for career details"""
        if any(word in user_input.lower() for word in ['no', 'done', 'finish', 'end']):
            return "Thank you for using the career counseling service! Feel free to start a new session anytime.", False
        return self._process_results(user_input)

    def get_next_question(self) -> str:
        """Get the next question based on current state"""
        current_state = self.conversation_flow[self.conversation_state]
        if self.current_question_index < len(current_state["questions"]):
            return current_state["questions"][self.current_question_index]
        return ""

    def process_input(self, user_input: str) -> str:
        """Process user input and return appropriate response"""
        current_state = self.conversation_flow[self.conversation_state]

        # Process the input using the appropriate function
        response, proceed = current_state["process_func"](user_input)

        if proceed:
            self.current_question_index += 1

            # Check if we need to move to next state
            if self.current_question_index >= len(current_state["questions"]):
                self.conversation_state = current_state["next_state"]
                self.current_question_index = 0

            next_question = self.get_next_question()
            if response and next_question:
                return f"{response}\n\n{next_question}"
            elif next_question:
                return next_question
            return response

        return response
    
import pickle   
with open('career_counseling_data.pkl', 'wb') as f:
    pickle.dump(career_counseling_data, f)


# Example usage
def main():
    chatbot = CareerCounselingChatbot(career_counseling_data)
    print("Career Counseling Chatbot")
    print("------------------------")
    print(chatbot.get_next_question())

    while True:
        user_input = input("\nYou: ")
        if user_input.lower() in ['quit', 'exit', 'bye']:
            print("\nChatbot: Thank you for using the career counseling service! Goodbye!")
            break

        response = chatbot.process_input(user_input)
        print(f"\nChatbot: {response}")

if __name__ == "__main__":
    main()

